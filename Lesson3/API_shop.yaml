openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        discriptions:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        clientId:
          type: integer
          format: int64
        items:
          type: string
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"
paths:
  /user/login:
    post:
      summary: user entrance
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The user password for login
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expiries-After:
              description: date in UTS when token expiries
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: invalid email/password
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      summary: add new item to the store
      operationId: create item
      description: new item object for adding to the store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        405:
          description: invalid input
      security:
      - api_key: []
    get:
      summary: get item list from store
      operationId: listItems
      parameters:
      - name: price_min
        in: query
        description: lower price
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: max price
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
               type: array
               items:
                $ref: '#/components/schemas/Item'
        400:
          description: invalid request
          content: {}
  /items/upload_image:
    post:
      summary: upload image to represent item
      operationId: uploadFile
      description: Additional data to pass to server
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                fileName:
                  description: file to upload
                  type: string
                  format: binary
      responses:
        201:
          description: file successful upload
      security:
      - api_key: []
  /items/{itemId}:
    get:
      summary: getting item by itemId
      operationId: getItem
      parameters:
      - name: itemId
        in: path
        description: id of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: invalid item id
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: updateItem
      parameters:
      - name: itemId
        in: path
        description: ID of the item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: invalid input
          content: {}
      security:
      - api_key: []
    delete:
      summary: delete item by id
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: item to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: invalid item id
          content: {}
        404:
          description: item not found
          content: {}
      security:
      - api_key: []
  /order/buy:
    post:
      summary: buy items in the cart
      operationId: buy items
      description: buy all items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        405:
          description: invalid input
      security:
      - api_key: []
      
      
  
        
        
        
        
        
        
        
        
              
    
      
  
  
        

          
      
      
          
          
          
          
          
          
          